{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACO;AACA;AACA;AACP;AACA;AACA;AACA,sCAAsC,cAAc,wBAAwB,SAAS;AAC9E;AACP;AACA;AACA;AACA;AACA;AACO,2BAA2B,cAAc;AACzC,yBAAyB,cAAc;AACvC,0BAA0B,cAAc;AACxC,4BAA4B,cAAc;;;;;;;;;;;;;;;;;;;AC5BlB;AAC0B;AAClD;AACP;AACA,IAAI,kDAAQ,QAAQ,UAAU,uBAAuB,UAAU;AAC/D;AACO;AACP;AACA,IAAI,kDAAQ,QAAQ,UAAU,qBAAqB,UAAU;AAC7D;AACA;AACe,6CAA6C;AAC5D;AACA,IAAI,kDAAQ,gCAAgC,SAAS;AACrD,gBAAgB,qDAAc;AAC9B,QAAQ,kDAAQ,yBAAyB;AACzC;AACA;AACA;AACA,wBAAwB,sDAAe;AACvC;AACA,yDAAyD,WAAW,6BAA6B;AACjG;AACA,yDAAyD,UAAU,eAAe;AAClF;AACA,qCAAqC,IAAI,IAAI,MAAM;AACnD,KAAK;AACL,8BAA8B;AAC9B,IAAI,kDAAQ;AACZ;AACA;AACA;AACA;AACA,uBAAuB,oCAAoC;AAC3D,iDAAiD;AACjD,SAAS;AACT;AACA;AACA,+BAA+B;AAC/B;AACA,YAAY,kDAAQ,8BAA8B,sCAAsC;AACxF;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,QAAQ,kDAAQ,wBAAwB,MAAM;AAC9C;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpD+B;AAC4C;AACnB;AACxD;AACO;AACP,IAAI,kDAAQ,kBAAkB,MAAM;AACpC,+BAA+B,OAAO;AACtC,QAAQ,kDAAQ;AAChB,KAAK;AACL;AACA;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA;AACO;AACP,+BAA+B,kBAAkB;AACjD;AACA;AACO;AACP;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,IAAI,qEAAiB;AACrB;AACA,sFAAsF,8BAA8B,UAAU,6CAA6C,sFAAsF,uBAAuB,UAAU,uBAAuB;AACzT,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA,uCAAuC,kDAAa;AACpD,sCAAsC,oDAAe;AACrD,uCAAuC,mDAAc;AACrD,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kDAAQ,iBAAiB,MAAM;AACnD;AACA;AACA,0EAA0E;AAC1E;AACA;AACA,oBAAoB,kDAAQ;AAC5B;AACA,oBAAoB,kDAAQ;AAC5B;AACA;AACA,oBAAoB,kDAAQ,mBAAmB,wBAAwB,UAAU,KAAK,YAAY;AAClG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sCAAsC,mDAAc;AACpD;AACA;AACA;AACA;AACO;AACP,gBAAgB,oDAAe;AAC/B;;;;;;;;;;;;;;;;AC5GiD;AACjD;AACe;AACf,QAAQ,yDAAoB;AAC5B;AACA,+CAA+C,QAAQ;AACvD;AACA;;;;;;;;;;;;;;;;;;;;;ACP+B;AACQ;AAC2B;AACT;AACI;AACL;AACxD;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACe,0CAA0C,oEAAoE;AAC7H,IAAI,kDAAQ,8CAA8C,OAAO;AACjE;AACA,sCAAsC,YAAY;AAClD;AACA;AACA,IAAI,wDAAkB;AACtB,mCAAmC;AACnC,gBAAgB,qDAAc;AAC9B,QAAQ,kDAAQ,yBAAyB;AACzC,QAAQ,sDAAgB;AACxB,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uCAAuC,sDAAe;AACtD,IAAI,kDAAQ;AACZ,IAAI,kDAAQ,oBAAoB,eAAe;AAC/C,IAAI,kDAAQ,qBAAqB,gBAAgB;AACjD;AACA,iBAAiB,+CAAU,4BAA4B,wBAAwB,qBAAqB,UAAU,OAAO;AACrH;AACA;AACA,kCAAkC,eAAe;AACjD;AACA,mCAAmC,gBAAgB;AACnD;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C,IAAI,kDAAQ,oCAAoC,IAAI;AACpD;AACA;AACA,QAAQ,6DAAkB;AAC1B,gEAAgE,YAAY;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ,sBAAsB,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAQ;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ,wBAAwB,yBAAyB;AACzE,gBAAgB,qEAAiB;AACjC;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,sDAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,gBAAgB,sDAAgB;AAChC,gBAAgB,2DAAgB;AAChC;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE,oBAAoB,sDAAgB;AACpC;AACA,oBAAoB,2DAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sDAAgB;AAChC,gBAAgB,2DAAgB;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ,wBAAwB,MAAM;AAC9C,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA,SAAS;AACT,QAAQ,sDAAgB;AACxB;AACA;;;;;;;;;;;;;;;;;AC9I6C;AACoB;AACjE;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA,gBAAgB,0DAAgB;AAChC,gBAAgB,8EAA0B;AAC1C;AACA,SAAS;AACT;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;ACjBgC;AACe;AACQ;AACa;AACtB;AAC9C,qCAAqC;AAC9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,aAAa,EAAE,6CAA6C;AACpH,iFAAiF,YAAY;AAC7F,4EAA4E,YAAY;AACxF;AACA;AACA,kEAAkE,YAAY;AAC9E;AACA;;AAEA;AACA,gFAAgF,YAAY,mEAAmE,YAAY,sCAAsC,YAAY;AAC7N;;AAEA;AACA;AACA;AACA;AACA,sGAAsG,YAAY;AAClH;AACA;AACA;AACA,yEAAyE,YAAY;AACrF;AACA;AACA;;AAEA;;;;AAIA;AACA,uEAAuE,aAAa,yBAAyB,YAAY;AACzH;AACA;AACA,0DAA0D,YAAY;;AAEtE;AACA,yEAAyE,YAAY,sCAAsC,YAAY;AACvI;;AAEA;AACA,sEAAsE,YAAY,uBAAuB,YAAY;AACrH;AACA;AACA;;AAEA;;AAEA,4EAA4E,YAAY,uBAAuB,YAAY;AAC3H;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+HAA+H,YAAY;AAC3I;AACA;AACA;AACA,wFAAwF,YAAY;AACpG;AACA;AACA;AACA;;AAEA;;AAEA,gEAAgE,YAAY;;AAE5E;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACO;AACP,IAAI,kDAAQ,mCAAmC,YAAY;AAC3D;AACA,wDAAwD,YAAY;AACpE,sDAAsD,YAAY,+CAA+C;AACjH;AACA;AACA;AACA;AACA;AACA,oEAAoE,aAAa,0CAA0C,YAAY;AACvI,wEAAwE,YAAY;AACpF,mGAAmG,YAAY;AAC/G,iFAAiF,YAAY;AAC7F;AACA;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA,0CAA0C;AAC1C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAoB;AAC5C,+CAA+C,YAAY;AAC3D;AACA;AACA,IAAI,kDAAQ;AACZ;AACA;AACA;AACA;AACA,IAAI,iFAAgC;AACpC;AACA,IAAI,0DAAmB;AACvB;AACA,IAAI,8DAAoB;AACxB;AACA;AACO;AACP,+BAA+B,YAAY;AAC3C;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1JyD;AAC0C;AAC1D;AACM;AACf;AACuB;AACgE;AAC7D;AAC1D;AACA;AACA,IAAI,kDAAQ;AACZ,6CAA6C,YAAY;AACzD;AACA,oDAAoD,YAAY;AAChE,IAAI,kDAAQ,gCAAgC,eAAe;AAC3D,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA,IAAI,kDAAQ,iCAAiC,gBAAgB;AAC7D;AACA,IAAI,6DAAuB;AAC3B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACe;AACf;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA,QAAQ,4DAAoB;AAC5B,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA,qDAAqD,YAAY;AACjE;AACA,QAAQ,6DAAuB,GAAG,mCAAmC;AACrE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oCAAoC,qDAAc;AAClD;AACA;AACA;AACA;AACA;AACA,qEAAqE,YAAY;AACjF;AACA,wBAAwB,6DAAuB,GAAG,mCAAmC;AACrF;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA,QAAQ,wDAAgB;AACxB,0EAA0E,YAAY;AACtF;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,gCAAgC,YAAY;AAC5C;AACA,YAAY,8DAAoB,mBAAmB,YAAY;AAC/D,gCAAgC,YAAY;AAC5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,oCAAoC,qDAAc;AAClD;AACA;AACA;AACA;AACA;AACA,wBAAwB,kDAAQ;AAChC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA;AACA,QAAQ,6DAAuB,GAAG,0BAA0B;AAC5D,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA;AACA,QAAQ,wDAAgB;AACxB;AACA,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA;AACA,2DAA2D,aAAa;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,UAAU;AAClF;AACA,8BAA8B,YAAY,cAAc,2BAA2B;AACnF;AACA,gCAAgC,YAAY;AAC5C;AACA,QAAQ,qDAAa;AACrB,QAAQ,4DAAkB;AAC1B,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA,QAAQ,qDAAa;AACrB;AACA,gCAAgC,YAAY;AAC5C,KAAK;AACL;AACA;AACA,4BAA4B,qDAAc;AAC1C;AACA;AACA,QAAQ,qDAAa;AACrB,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,6DAAsB;AAC9B,KAAK;AACL;AACA;AACA;AACA;AACA,qCAAqC,wDAAiB;AACtD;AACA,gBAAgB,uEAAsB;AACtC,gBAAgB,iEAA0B;AAC1C,gBAAgB,2DAAoB;AACpC;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;AC9LA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP,0EAA0E,YAAY;AACtF;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBgC;AAC6B;AACT;AACN;AACC;AAC/C;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,qBAAqB;AAChC,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA,aAAa;AACb;AACe,yCAAyC,kFAAkF;AAC1I,IAAI,kDAAQ;AACZ,0CAA0C;AAC1C;AACA,QAAQ,kDAAQ,qBAAqB;AACrC;AACA;AACA;AACA;AACA,QAAQ,2DAAmB;AAC3B,kBAAkB,2DAAoB;AACtC,YAAY,sDAAwB,GAAG,0BAA0B;AACjE;AACA;AACA,YAAY,qDAAa;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAmB;AAChC,YAAY,kDAAQ,qBAAqB;AACzC;AACA;AACA,QAAQ,kDAAQ,mBAAmB;AACnC,QAAQ,2DAAmB;AAC3B;AACA,oBAAoB,2DAAoB;AACxC,YAAY,qDAAa;AACzB;AACA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA,QAAQ,sDAAwB;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AC1DgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA,IAAI,kDAAQ,kCAAkC,WAAW,WAAW,QAAQ;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;AC1DgC;AACiC;AACjE;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D,oDAAoD,YAAY;AAChE,mCAAmC,YAAY;AAC/C;AACA;AACA,QAAQ,4DAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,iDAAiD,YAAY;AAC7D,yDAAyD,YAAY;AACrE,QAAQ,0DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ,iDAAiD,YAAY;AAC7D;AACA;AACA;;;;;;;;;;;;;;;;;;;AClGgC;AACQ;AACxC;AACO;AACP,IAAI,kDAAQ,mCAAmC,YAAY;AAC3D;AACA,sEAAsE,YAAY;AAClF;AACA,+BAA+B,YAAY;AAC3C;AACA;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA;AACO,6BAA6B,qEAAqE;AACzG;AACA;AACA,mCAAmC,KAAK;AACxC,IAAI;AACJ,mCAAmC,uBAAuB,OAAO;AACjE;AACA;AACA;AACA,yEAAyE,YAAY;AACrF;AACA;AACA,YAAY,qDAAa;AACzB;AACA;AACA;AACA;AACA,YAAY,qDAAa;AACzB;AACA;;;;;;;;;;;;;;;;;;;;ACnC+B;AACA;AAC0B;AACD;AACxD;AACe;AACf,IAAI,kDAAQ;AACZ;AACA,2BAA2B,gDAAU,CAAC,+CAAU;AAChD;AACA;AACA;AACA,QAAQ,kDAAQ,+BAA+B,MAAM;AACrD;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA,iCAAiC,uBAAuB,cAAc,wCAAwC,sDAAsD,qDAAgB,CAAC,SAAS,WAAW;AACzM;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1C+B;AACyB;AACjD;AACP;AACA;AACA,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA;AACA;AACA;AACO;AACP,IAAI,kDAAQ;AACZ;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,qEAAiB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;UCxCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNmD;AACW;AACT;AACK;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAiB;AACzB;AACA,2DAA2D;AAC3D;AACA;AACA;AACA,QAAQ,gEAAyB;AACjC;AACA;AACA;AACA;AACA,cAAc,gEAAqB;AACnC;AACA,QAAQ,kEAAmB;AAC3B;AACA;AACA,CAAC","sources":["webpack://code/./ts/config.ts","webpack://code/./ts/lib/api.ts","webpack://code/./ts/lib/auth.ts","webpack://code/./ts/lib/debug.ts","webpack://code/./ts/lib/inference.ts","webpack://code/./ts/lib/ui/compose-area.ts","webpack://code/./ts/lib/ui/compose-interface.ts","webpack://code/./ts/lib/ui/event-handlers.ts","webpack://code/./ts/lib/ui/general.ts","webpack://code/./ts/lib/ui/generate-message.ts","webpack://code/./ts/lib/ui/input-suggestions.ts","webpack://code/./ts/lib/ui/state.ts","webpack://code/./ts/lib/ui/status-message.ts","webpack://code/./ts/lib/user.ts","webpack://code/./ts/lib/util.ts","webpack://code/webpack/bootstrap","webpack://code/webpack/runtime/define property getters","webpack://code/webpack/runtime/hasOwnProperty shorthand","webpack://code/webpack/runtime/make namespace object","webpack://code/./ts/content.ts"],"sourcesContent":["/**\n * Use the development back end (localhost:3000) and allow debugging messages\n *\n * Don't touch these. The build script will temporarily set these to false during\n * the build process, and then set them back to true when the build is complete.\n *\n * This allows us to use the production back end for the production build and\n * the development back end for the development build.\n */\nexport const USE_DEV_BACK_END = true;\nexport const ALLOW_DEBUG_MESSAGES = true;\n// Back-end hosts\nexport const DEV_BACK_END_HOST = 'http://localhost:3000';\nexport const PROD_BACK_END_HOST = 'https://app.emailgenius.app';\nexport const BACK_END_HOST = USE_DEV_BACK_END\n    ? DEV_BACK_END_HOST\n    : PROD_BACK_END_HOST;\n// API endpoints\nconst createApiUrl = (endpoint) => `${BACK_END_HOST}/api/chrome-extension/${endpoint}`;\nexport const API_ROUTES = {\n    generate_message_streaming: createApiUrl('messages/generate-streaming'),\n    generate_message: createApiUrl('messages/generate'),\n    get_user_data: createApiUrl('users/get-user-data'),\n};\n// Other URLs\nexport const LOGIN_POPUP_URL = `${BACK_END_HOST}/login-popup`;\nexport const DASHBOARD_URL = `${BACK_END_HOST}/dashboard`;\nexport const SIGNED_OUT_URL = `${BACK_END_HOST}/dashboard/signed-out`;\nexport const SUBSCRIPTION_URL = `${BACK_END_HOST}/api/payment/create-checkout-session`;\n","import debugLog from './debug';\nimport { getTokenLocally, isUserLoggedIn } from './auth';\nexport function logApiRequestStart() {\n    const separator = '='.repeat(80);\n    debugLog(`\\n\\n${separator}\\nBegin API request\\n${separator}\\n\\n`);\n}\nexport function logApiRequestEnd() {\n    const separator = '='.repeat(80);\n    debugLog(`\\n\\n${separator}\\nEnd API request\\n${separator}\\n\\n`);\n}\n// Send API requests to the back end\nexport default async function apiRequest(endpoint, data = {}) {\n    logApiRequestStart();\n    debugLog(`Initializing API request to ${endpoint}...`);\n    if (!(await isUserLoggedIn())) {\n        debugLog('User is not logged in; aborting API request');\n        logApiRequestEnd();\n        throw new Error('User is not logged in');\n    }\n    const token = await getTokenLocally();\n    // Add token to request data\n    const apiRequestData = Object.assign(Object.assign({}, data), { chromeExtensionToken: token });\n    // Log API request parameters\n    let apiRequestDataString = `Sending API request to ${endpoint} with data:\\n\\n{\\n`;\n    Object.entries(apiRequestData).forEach(([key, value]) => {\n        apiRequestDataString += `  ${key}: ${value}\\n`;\n    });\n    apiRequestDataString += '}';\n    debugLog(apiRequestDataString);\n    try {\n        // Send API request\n        const response = await fetch(endpoint, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(Object.assign({}, apiRequestData)),\n        });\n        // Save data from response\n        const responseData = await response.json();\n        // Response succeeded; return data\n        if (response.ok) {\n            debugLog(`API response received:\\n\\n${JSON.stringify(responseData, null, 2)}`);\n            logApiRequestEnd();\n            return responseData;\n        }\n        // Response failed; throw error\n        throw new Error(response.statusText);\n    }\n    catch (error) {\n        debugLog(`API response error: ${error}`);\n        logApiRequestEnd();\n        throw error;\n    }\n}\n","import debugLog from './debug';\nimport { DASHBOARD_URL, LOGIN_POPUP_URL, SIGNED_OUT_URL } from '../config';\nimport { showStatusMessage } from './ui/status-message';\n// Save token in Chrome local storage\nexport function saveTokenLocally(token) {\n    debugLog(`Saving token: ${token}`);\n    chrome.storage.local.set({ token }, () => {\n        debugLog('Token is saved in local storage');\n    });\n}\n// Get token from Chrome local storage\nexport async function getTokenLocally() {\n    debugLog('Getting token from local storage...');\n    return new Promise((resolve) => {\n        chrome.storage.local.get(['token'], (result) => {\n            resolve(result.token);\n        });\n    });\n}\n// Remove token from Chrome local storage\nexport function removeTokenLocally() {\n    debugLog('Removing token from local storage...');\n    chrome.storage.local.remove('token');\n}\n// Set a a \"fresh login\" flag in Chrome local storage\nexport async function setFreshLoginFlag() {\n    chrome.storage.local.set({ freshLogin: true });\n}\n// Check for a \"fresh login\" flag in Chrome local storage\nexport async function getFreshLoginFlag() {\n    return new Promise((resolve) => {\n        chrome.storage.local.get(['freshLogin'], (result) => {\n            resolve(result.freshLogin);\n        });\n    });\n}\n// Remove \"fresh login\" flag from Chrome local storage\nexport function removeFreshLoginFlag() {\n    debugLog('Removing freshLogin from local storage...');\n    chrome.storage.local.remove('freshLogin');\n}\n// Check if the user is logged in by checking for a locally stored token\nexport async function isUserLoggedIn() {\n    const token = await getTokenLocally();\n    return !!token;\n}\n// Show login prompt if the user is not logged in\nexport async function authenticationCheck(containerId) {\n    if (!(await isUserLoggedIn())) {\n        showStatusMessage({\n            type: 'welcome',\n            message: 'Welcome to EmailGenius! Please <a href=\"#\" class=\"eg-auth-link\">log in</a> to continue.',\n            containerId,\n            changeState: false,\n            cancellable: false,\n        });\n    }\n}\n// Show welcome message upon login\nexport function showLoggedInWelcomeMessage() {\n    debugLog('Showing logged-in welcome message...');\n    showStatusMessage({\n        type: 'welcome',\n        message: \"To use EmailGenius, type instructions in the box below, like &ldquo;write a thank-you note&rdquo; or &ldquo;ask a friend for book recommendations.&rdquo;<br /><br />After the message is created, you can give more instructions, like &ldquo;make it shorter&rdquo; or &ldquo;make it funnier.&rdquo;<br /><br />When you're ready, you can add the message to your email, edit it, and send it.\",\n    });\n}\n// Grab and save the Chrome extension token from the EmailGenius login flow\nexport function listenForTokenActions() {\n    const listenInterval = 200;\n    const maxAttempts = 1000;\n    let attempts = 0;\n    // If we're on a token display page, check for token (up to `maxAttempts` times)\n    if ((window.location.href.includes(DASHBOARD_URL) ||\n        window.location.href.includes(LOGIN_POPUP_URL)) &&\n        !window.location.href.includes(SIGNED_OUT_URL)) {\n        debugLog('Trying to extract token from page...');\n        setTimeout(async function checkForToken() {\n            attempts += 1;\n            if (attempts < maxAttempts) {\n                // The token will be embedded in an element with id #chrome-extension-token\n                const tokenElement = $('#chrome-extension-token');\n                if (tokenElement.length) {\n                    const token = tokenElement.text();\n                    debugLog(`Token found: ${token}`);\n                    saveTokenLocally(token);\n                    /**\n                     * Save a flag indicating that this is a fresh login; this lets us\n                     * displasy a welcome message to new users\n                     */\n                    debugLog('Setting fresh login flag...');\n                    await setFreshLoginFlag();\n                    debugLog('Fresh login flag set');\n                }\n                else {\n                    debugLog(`Token not found; trying again (attempt ${attempts} of ${maxAttempts})...`);\n                    setTimeout(checkForToken, listenInterval);\n                }\n            }\n        }, listenInterval);\n    }\n    // Remove token if we're on the signout page\n    if (window.location.href.includes(SIGNED_OUT_URL)) {\n        removeTokenLocally();\n    }\n}\n// Show a popup window and authenticate the user\nexport function showAuthenticationFlow() {\n    window.open(LOGIN_POPUP_URL, '_blank');\n}\n","import { ALLOW_DEBUG_MESSAGES } from '../config';\n// Log a debugging message to the console\nexport default function debugLog(message) {\n    if (ALLOW_DEBUG_MESSAGES) {\n        // eslint-disable-next-line no-console\n        console.log(`[EmailGenius extension] ${message}`);\n    }\n}\n","import debugLog from './debug';\nimport { API_ROUTES } from '../config';\nimport { showPreviewState, showStreamingState } from './ui/state';\nimport { getTokenLocally, isUserLoggedIn } from './auth';\nimport { logApiRequestStart, logApiRequestEnd } from './api';\nimport { showStatusMessage } from './ui/status-message';\n/**\n * Stream a message from the API to the UI.\n *\n * @param {string} containerId - The ID of the compose area\n * @param {string} prompt - The prompt to generate a message from\n * @param {string} previousPrompt - The previous prompt (if any)\n * @param {string} previousMessage - The previous message (if any)\n * @param {string} tryAgainUrl - The URL to use for \"try again\" requests\n */\nexport default async function generateStreamingMessage({ containerId, prompt, previousPrompt, previousMessage, tryAgainUrl, }) {\n    debugLog(`Generating streaming message for prompt: \"${prompt}\"`);\n    // Clear previous preview\n    $(`.eg-preview-message-contents-${containerId}`)\n        .find('.eg-stream-output')\n        .html('');\n    logApiRequestStart();\n    // Check if user is logged in; if not, abort\n    if (!(await isUserLoggedIn())) {\n        debugLog('User is not logged in; aborting API request');\n        logApiRequestEnd();\n        showStatusMessage({\n            type: 'error',\n            message: 'Please <a href=\"#\" class=\"eg-auth-link\">log in</a> to use EmailGenius.',\n            containerId,\n        });\n        return;\n    }\n    // Get token from local storage\n    const chromeExtensionToken = await getTokenLocally();\n    debugLog('Constructing streaming request URL...');\n    debugLog(`previousPrompt: ${previousPrompt}`);\n    debugLog(`previousMessage: ${previousMessage}`);\n    // Construct request URL\n    let url = `${API_ROUTES.generate_message_streaming}?chromeExtensionToken=${chromeExtensionToken}&prompt=${prompt}`;\n    // Add previous prompt and message to URL if they exist\n    if (previousPrompt)\n        url += `&previousPrompt=${previousPrompt}`;\n    if (previousMessage)\n        url += `&previousMessage=${previousMessage}`;\n    // If the user clicked \"try again,\" use the URL saved in the \"try again\" button\n    if (tryAgainUrl)\n        url = tryAgainUrl;\n    // Save URL to \"try again\" button\n    $(`.eg-try-again-button-${containerId}`).attr('try-again-url', url);\n    debugLog(`Initiating streaming request to ${url}`);\n    // Print streaming chunks in the preview container\n    function showStreamingResponse(data) {\n        showStreamingState(containerId);\n        const outputElement = $(`.eg-preview-message-contents-${containerId}`).find('.eg-stream-output');\n        const currentOutput = outputElement.html();\n        outputElement.html(currentOutput + data);\n    }\n    // Get streaming chunks from the server\n    function streamResponse(callback) {\n        const eventSource = new EventSource(url);\n        debugLog(`Listening on SSE: ${eventSource}`);\n        /* If it takes longer than 12 seconds to get a response from the server,\n         * re-invoke the request\n         */\n        let isActive = true;\n        const errorTimeout = setTimeout(() => {\n            debugLog('Delay of more than 12 seconds detected, re-invoking streamResponse...');\n            isActive = false;\n            eventSource.close();\n            streamResponse(callback);\n        }, 12000);\n        // Handle errors\n        let hasErrorOccurred = false;\n        eventSource.onerror = (error) => {\n            if (!isActive)\n                return;\n            clearTimeout(errorTimeout);\n            if (!hasErrorOccurred) {\n                hasErrorOccurred = true;\n                const errorEvent = error;\n                const errorObj = {\n                    type: errorEvent.type,\n                    message: errorEvent.message,\n                };\n                debugLog(`API response error: ${JSON.stringify(errorObj)}`);\n                showStatusMessage({\n                    type: 'error',\n                    message: 'Something went wrong. Please try again.',\n                    containerId,\n                });\n                logApiRequestEnd();\n                eventSource.close();\n            }\n        };\n        // Handle streamed message chunks\n        eventSource.onmessage = (event) => {\n            if (!isActive)\n                return;\n            clearTimeout(errorTimeout);\n            const { data } = event;\n            // debugLog(data);\n            if (data === '[DONE]') {\n                eventSource.close();\n                logApiRequestEnd();\n                showPreviewState(containerId);\n            }\n            else {\n                const jsonData = JSON.parse(data);\n                const { content } = jsonData.choices[0].delta;\n                if (content) {\n                    const formattedContent = content === null || content === void 0 ? void 0 : content.replace(/\\n/g, '<br>');\n                    callback(formattedContent);\n                }\n                // Cancel generation if user clicks \"cancel\"\n                if ($(`.eg-stop-generating-button-${containerId}`).attr('data-generation-cancelled') === 'true') {\n                    logApiRequestEnd();\n                    eventSource.close();\n                    showPreviewState(containerId);\n                }\n            }\n        };\n        return {\n            close: () => {\n                eventSource.close();\n                logApiRequestEnd();\n                showPreviewState(containerId);\n            },\n        };\n    }\n    try {\n        streamResponse(showStreamingResponse);\n    }\n    catch (error) {\n        debugLog(`API response error: ${error}`);\n        showStatusMessage({\n            type: 'error',\n            message: 'Something went wrong. Please try again.',\n            containerId,\n        });\n        logApiRequestEnd();\n    }\n}\n","import { isElementVisible } from './general';\nimport { initializeComposeInterface } from './compose-interface';\n/**\n *  Check whether we're in a Gmail compose area;\n *  if so, inject and show the EmailGenius interface\n */\nexport default function listenForGmailComposeArea() {\n    const listenInterval = 1000;\n    setTimeout(function checkForComposeElements() {\n        // Loop through message composition elements\n        $('div[aria-label=\"Message Body\"]').each((index, composeArea) => {\n            if (isElementVisible('div[aria-label=\"Message Body\"]')) {\n                initializeComposeInterface(composeArea);\n            }\n        });\n        setTimeout(checkForComposeElements, listenInterval);\n    }, listenInterval);\n}\n","import debugLog from '../debug';\nimport { generateRandomString } from '../util';\nimport showInputSuggestions from './input-suggestions';\nimport { initializeStatusMessageContainer } from './status-message';\nimport { authenticationCheck } from '../auth';\n// Create the primary interface bar; this lives at the top of the compose area\nexport function initializeButtonsBar(containerId, composeContainer) {\n    /**\n     * Is this a reply composition window (as opposed to a fresh composition\n     * window)? If so, we'll add additional styling\n     */\n    let isReply = false;\n    if (composeContainer.closest('.aoP').has('div[aria-label=\"Type of response\"]')\n        .length > 0) {\n        isReply = true;\n    }\n    // Generate message buttons HTML\n    const buttonsBarHTML = `\n<div class=\"eg-compose-container eg-compose-container-${containerId} ${isReply ? ' eg-compose-container-reply' : ''}\">\n  <div class=\"eg-buttons-bar eg-buttons-bar-minimized eg-buttons-bar-minimized-${containerId}\">\n    <i class=\"fa-solid fa-wand-magic-sparkles eg-wand\" data-container-id=\"${containerId}\"></i>\n  </div>\n  \n  <div class=\"eg-buttons-bar eg-buttons-bar-base eg-buttons-bar-${containerId}\">\n  \n    <div class=\"eg-buttons-left\">\n\n      <div class=\"eg-generate-input-container\">\n        <i class=\"fa-solid fa-wand-magic-sparkles eg-wand\" data-container-id=\"${containerId}\"></i><input class=\"eg-generate-input eg-input eg-generate-input-${containerId}\" placeholder=\"\" data-container-id=\"${containerId}\" />\n      </div>\n\n    </div><!-- /.eg-buttons-left -->\n    \n    <div class=\"eg-buttons-right\">\n      <div class=\"eg-generate-input-buttons\">\n        <div class=\"eg-button eg-generate-input-create-button eg-primary-button\" data-container-id=\"${containerId}\">\n          Generate\n        </div> \n      </div>\n      <!-- <div class=\"eg-button eg-settings-button eg-settings-button-${containerId}\">\n        <i class=\"fa-solid fa-gear\"></i>\n      </div> -->\n    </div><!-- /.eg-buttons-right -->\n\n  </div><!-- /.eg-buttons-bar-base -->\n\n\n\n  <div class=\"eg-preview-wrapper\">\n    <div class=\"eg-buttons-bar eg-buttons-bar-preview eg-buttons-bar-${containerId} eg-buttons-bar-preview-${containerId}\">\n    \n      <div class=\"eg-buttons-left\">\n        <div class=\"eg-revise-buttons eg-revise-buttons-${containerId}\">\n\n          <div class=\"eg-edit-input-container\">\n            <input class=\"eg-edit eg-edit-input eg-input eg-edit-input-${containerId}\" placeholder=\"\" data-container-id=\"${containerId}\" />\n          </div>\n\n          <div class=\"eg-revise\">\n            <div class=\"eg-button eg-revise-button eg-revise-button-${containerId}\" data-container-id=\"${containerId}\">\n              <i class=\"fa-solid fa-pen-to-square eg-button-icon\"></i>\n              Edit\n            </div>\n\n            <span class=\"eg-button-separator\">|</span>\n\n            <div class=\"eg-button eg-try-again-button eg-try-again-button-${containerId}\" data-container-id=\"${containerId}\">\n              <i class=\"fa-solid fa-rotate-right eg-button-icon\"></i>\n              Try Again\n            </div>\n          </div>\n\n        </div>\n      </div><!-- /.eg-buttons-left -->\n\n      <div class=\"eg-buttons-right\">\n        <div class=\"eg-button eg-edit eg-edit-input-create-button eg-regenerate-button eg-primary-button\" data-container-id=\"${containerId}\">\n          Regenerate\n        </div> \n        <!--\n        <div class=\"eg-button eg-revise eg-edit eg-settings-button eg-settings-button-${containerId}\">\n          <i class=\"fa-solid fa-gear\"></i>\n        </div>\n        -->\n      </div><!-- /.eg-buttons-right -->\n\n    </div><!-- /.eg-buttons-bar-preview -->\n\n    <div class=\"eg-preview-loading-bar eg-preview-loading-bar-${containerId}\"></div>\n\n  </div><!-- /.eg-preview-wrapper -->\n\n</div><!-- /.eg-compose-container -->\n  `;\n    return buttonsBarHTML;\n}\n/**\n * Create the preview container; this is where the preview of the generated\n * message will be displayed to the user, with \"Add to Message\" and \"Cancel\"\n * buttons\n */\nexport function initializePreviewContainer(containerId) {\n    debugLog(`Creating preview container for ${containerId}...`);\n    const previewContainerHTML = `\n<div class=\"eg-preview-container eg-preview-container-${containerId}\">\n  <div class=\"eg-previous-prompt eg-previous-prompt-${containerId}\" data-previous-prompt=\"\" style=\"display: none;\"></div>\n  <div class=\"eg-preview-loading\">\n    <p>Generating...</p>\n    <i class=\"fa-solid fa-circle-notch fa-spin fa-xl\"></i>\n  </div>\n  <div class=\"eg-preview-content\">\n  <div class=\"eg-stop-generating-button eg-stop-generating-button-${containerId} eg-streaming-button\" data-container-id=\"${containerId}\"><i class=\"fa-solid fa-ban\"></i>Stop Generating</div>  \n  <div class=\"eg-preview-message-contents eg-preview-message-contents-${containerId}\"><p class=\"eg-stream-output eg-stream-output-with-cursor\"></p></div>\n    <div class=\"eg-preview-button eg-preview-insert-button eg-primary-button\" data-container-id=\"${containerId}\">Add to Message</div>\n    <div class=\"eg-preview-button eg-preview-cancel-button\" data-container-id=\"${containerId}\">Cancel</div>\n  </div>\n</div>\n  `;\n    // Inject the preview container\n    $(`.eg-preview-loading-bar-${containerId}`).after(previewContainerHTML);\n}\n/**\n * Initialize main composition interface; there could be several of these (e.g.,\n * one for a fresh composition window and one for a reply)\n */\nexport function initializeComposeInterface(composeArea) {\n    // Get the container for the message composition area\n    const container = $(composeArea).closest('.iN');\n    // If the message buttons are already attached, don't attach them again\n    if (container.hasClass('eg-buttons-attached'))\n        return;\n    // Add a class to indicate that the message buttons are attached\n    container.addClass('eg-buttons-attached');\n    // Generate a unique ID for this container\n    const containerId = generateRandomString();\n    $(composeArea).addClass(`eg-compose-area-${containerId}`);\n    // Inject message buttons\n    const messageButtonsHTML = initializeButtonsBar(containerId, container);\n    debugLog('Prepending message buttons...');\n    container.before(messageButtonsHTML);\n    // Create the message preview container (hidden initially)\n    initializePreviewContainer(containerId);\n    // Create the error/info message container (hidden initially)\n    initializeStatusMessageContainer(containerId);\n    // Check if user is authenticated, and if not, show login prompt\n    authenticationCheck(containerId);\n    // Show suggestions in the input placeholder attribute\n    showInputSuggestions('.eg-generate-input', 'generate');\n}\n// Show the generated message in the preview container\nexport function injectMessagePreview(containerId, message) {\n    $(`.eg-preview-container-${containerId}`)\n        .find('.eg-preview-message-contents')\n        .html(message);\n}\n","import handleMessageGeneration from './generate-message';\nimport { showBaseState, showEditingState, showPreviewState, toggleMinimizedState, } from './state';\nimport { getContainerId } from '../util';\nimport { focusOnComposeArea } from './general';\nimport debugLog from '../debug';\nimport showInputSuggestions from './input-suggestions';\nimport { getFreshLoginFlag, removeFreshLoginFlag, showAuthenticationFlow, showLoggedInWelcomeMessage, } from '../auth';\nimport { clearAllStatusMessages } from './status-message';\n// Handle \"Edit -> Regenerate\" actions\nfunction processRegenerateAction(containerId) {\n    debugLog('processRegenerateAction() called');\n    const inputElement = $(`.eg-edit-input-${containerId}`);\n    const prompt = inputElement.val();\n    const previousPrompt = $(`.eg-previous-prompt-${containerId}`).attr('data-previous-prompt');\n    debugLog(`Retrieved previous prompt: \"${previousPrompt}\"`);\n    const previousHTMLMessage = $(`.eg-preview-message-contents-${containerId}`)\n        .find('.eg-stream-output')\n        .html();\n    const previousMessage = previousHTMLMessage.replace(/<br>/g, '\\n');\n    debugLog(`Retrieved previous message: \"${previousMessage}\"`);\n    inputElement.val('');\n    handleMessageGeneration({\n        containerId,\n        inputElement,\n        prompt,\n        previousPrompt,\n        previousMessage,\n    });\n}\n// Attach event handlers when the extension initializes\nexport default function attachEventHandlers() {\n    // Handle \"Minimze\" button clicks\n    $(document).on('click', '.eg-wand', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        toggleMinimizedState(containerId);\n    });\n    // Handle \"Generate\" button clicks\n    $(document).on('click', '.eg-generate-input-create-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        const inputElement = $(`.eg-generate-input-${containerId}`);\n        const prompt = inputElement.val();\n        handleMessageGeneration({ containerId, inputElement, prompt });\n    });\n    // Handle \"Enter\" keypresses in the generate prompt input\n    let lastKeypressTime = 0;\n    $(document).on('focusin', (e) => {\n        if ($(e.target).hasClass('eg-generate-input')) {\n            $(e.target).on('keydown', function (e2) {\n                const containerId = getContainerId($(this));\n                if (!containerId)\n                    return;\n                if (e2.key === 'Enter') {\n                    const currentTime = new Date().getTime();\n                    if (currentTime - lastKeypressTime > 2000) {\n                        const inputElement = $(`.eg-generate-input-${containerId}`);\n                        const prompt = inputElement.val();\n                        handleMessageGeneration({ containerId, inputElement, prompt });\n                        lastKeypressTime = currentTime;\n                    }\n                }\n            });\n        }\n    });\n    // Handle \"Edit\" button clicks\n    $(document).on('click', '.eg-revise-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        showEditingState(containerId);\n        const editInputElement = document.querySelector(`.eg-edit-input-${containerId}`);\n        if (editInputElement) {\n            editInputElement.focus();\n        }\n        // Only call \"show suggestions\" once; otherwise, it'll get called repeatedly\n        // and will show updated suggestions too often\n        if ($(`.eg-edit-input-${containerId}`).attr('data-suggestions-shown') !==\n            'true') {\n            showInputSuggestions(`.eg-edit-input-${containerId}`, 'edit');\n            $(`.eg-edit-input-${containerId}`).attr('data-suggestions-shown', 'true');\n        }\n    });\n    // Handle \"Enter\" keypresses in the edit prompt input\n    let lastEditKeypressTime = 0;\n    $(document).on('focusin', (e) => {\n        if ($(e.target).hasClass('eg-edit-input')) {\n            $(e.target).on('keydown', function (e2) {\n                const containerId = getContainerId($(this));\n                if (!containerId)\n                    return;\n                if (e2.key === 'Enter') {\n                    const currentTime = new Date().getTime();\n                    if (currentTime - lastEditKeypressTime > 2000) {\n                        debugLog('\"Enter\" keypress detected');\n                        processRegenerateAction(containerId);\n                        lastEditKeypressTime = currentTime;\n                    }\n                }\n            });\n        }\n    });\n    // Handle editing \"regenerate\" button clicks\n    $(document).on('click', '.eg-regenerate-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        processRegenerateAction(containerId);\n    });\n    // Handle \"Try Again\" button clicks\n    $(document).on('click', '.eg-try-again-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        const tryAgainUrl = $(this).attr('try-again-url');\n        handleMessageGeneration({ containerId, tryAgainUrl });\n    });\n    // Handle \"Stop Generating\" button clicks\n    $(document).on('click', '.eg-stop-generating-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        $(this).attr('data-generation-cancelled', 'true');\n        showPreviewState(containerId);\n        $(this).hide();\n    });\n    // Handle \"Insert\" button clicks\n    $(document).on('click', '.eg-preview-insert-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        // Get the message contents\n        const messageContents = $(`.eg-preview-container-${containerId} .eg-preview-message-contents`).html();\n        // Remove p tags (and any attributes) and replace them with divs\n        const cleanedMessageContents = messageContents\n            .replace(/<p[^>]*>/g, '<div>')\n            .replace(/<\\/p>/g, '</div>');\n        /**\n         * Wrap paragraphs in divs and replace \"<br><br>\" with an empty div\n         * (this is necessary for integration with Gmail's message styles)\n         */\n        const paragraphs = cleanedMessageContents.split('<br><br>');\n        const wrappedParagraphs = paragraphs.map((paragraph) => `<div>${paragraph}</div><div><br></div>`);\n        // Insert the message contents into the compose area\n        $(`.eg-compose-area-${containerId}`).prepend(`${wrappedParagraphs.join('')}<div><br></div>`);\n        // Clear the prompt input\n        $(`.eg-generate-input-${containerId}`).val('');\n        // Show the base state and focus on the compose area\n        showBaseState(containerId);\n        focusOnComposeArea(containerId);\n    });\n    // Handle \"Cancel\" button clicks in the preview state\n    $(document).on('click', '.eg-preview-cancel-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        showBaseState(containerId);\n        // Clear the prompt input\n        $(`.eg-generate-input-${containerId}`).val('');\n    });\n    // Handle \"Cancel\" button clicks in the generate state\n    $(document).on('click', '.eg-generate-input-cancel-button', function () {\n        const containerId = getContainerId($(this));\n        if (!containerId)\n            return;\n        showBaseState(containerId);\n    });\n    // Handle \"Close Message\" button clicks\n    $(document).on('click', '.eg-close-message', function () {\n        $(this).parent().hide();\n    });\n    // Handle \"please log in\" clicks\n    $(document).on('click', '.eg-auth-link', (event) => {\n        event.preventDefault();\n        showAuthenticationFlow();\n    });\n    // Add event handler for when focus returns to the document\n    $(document).on('focusin', () => {\n        (async () => {\n            // If this is the first time a user has logged in, show the welcome message\n            const freshLogin = await getFreshLoginFlag();\n            if (freshLogin) {\n                clearAllStatusMessages();\n                showLoggedInWelcomeMessage();\n                removeFreshLoginFlag();\n            }\n        })();\n    });\n}\n","// Check whether a given element is visible\nexport function isElementVisible(selector) {\n    const element = document.querySelector(selector);\n    if (element &&\n        getComputedStyle(element).display !== 'none' &&\n        getComputedStyle(element).visibility !== 'hidden') {\n        return true;\n    }\n    return false;\n}\n// Inject FontAwesome icons from Cloudflare CDN\nexport function injectFontAwesome() {\n    $('head').append('<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">');\n}\n// Focus on the message composition area\nexport function focusOnComposeArea(containerId) {\n    const composeAreaElement = document.querySelector(`.eg-compose-area-${containerId}`);\n    if (composeAreaElement)\n        composeAreaElement.focus();\n}\n","import debugLog from '../debug';\nimport { showBaseState, showGeneratingState } from './state';\nimport generateStreamingMessage from '../inference';\nimport { validatePromptInput } from '../util';\nimport { validateTokenBalance } from '../user';\n/** Generate a message and handle state changes. This function handles message\n * generation events and then calls generateStreamingMessage() to stream the\n * message from the API to the UI.\n * @param {string} containerId - The ID of the compose area\n * @param {JQuery<HTMLElement>} inputElement - The input element containing the prompt\n * @param {string} prompt - The prompt to generate a message from\n * @param {string} previousPrompt - The previous prompt (if any)\n * @param {string} previousMessage - The previous message (if any)\n * @param {string} tryAgainUrl - The URL to use for \"try again\" requests\n *\n * @returns {void}\n */\nexport default async function handleMessageGeneration({ containerId, inputElement, prompt, previousPrompt, previousMessage, tryAgainUrl, }) {\n    debugLog('handleMessageGeneration() called');\n    // Check if inputElement is disabled; if so, don't do anything\n    if (inputElement && inputElement.prop('disabled')) {\n        debugLog('Input is disabled; not generating message');\n        return;\n    }\n    if (tryAgainUrl) {\n        // If the user clicked \"try again,\" use the URL saved in the \"try again\" button\n        showGeneratingState(containerId);\n        if (await validateTokenBalance(containerId)) {\n            generateStreamingMessage({ containerId, tryAgainUrl });\n        }\n        else {\n            showBaseState(containerId);\n        }\n    }\n    else {\n        // Otherwise, pass all prompt data to generateStreamingMessage()\n        // Validate prompt input\n        if (!validatePromptInput(prompt || '', containerId)) {\n            debugLog('Prompt is invalid; not generating message');\n            return;\n        }\n        debugLog('Prompt is valid; continuing to generation...');\n        showGeneratingState(containerId);\n        // Validate token balance\n        if (!(await validateTokenBalance(containerId))) {\n            showBaseState(containerId);\n            return;\n        }\n        // Save the prompt in a hidden div\n        $(`.eg-previous-prompt-${containerId}`).attr('data-previous-prompt', prompt || '');\n        // Send an API request to start generating a message and stream it to the UI\n        generateStreamingMessage({\n            containerId,\n            prompt,\n            previousPrompt,\n            previousMessage,\n        });\n    }\n}\n","import debugLog from '../debug';\nconst generatePlaceholderText = [\n    'Catch up with a friend',\n    'Invite friends to a party',\n    'Write a thank-you note',\n    'Send congratulations',\n    'Send holiday greetings',\n    'Ask for book recommendations',\n    'Send an apology',\n    'Ask for advice',\n    'Send an introduction',\n];\nconst editPlaceholderText = [\n    'Make it shorter',\n    'Make it funnier',\n    'Add bullet points',\n    'Include a question',\n    'Add a quotation from an expert',\n    'Add data or statistics',\n    'Add emojis',\n    'Use metaphors or analogies',\n    'Add a sense of urgency',\n    'Add a summary at the top',\n];\n// Show suggestions as placeholder text in the input field\nexport default function showInputSuggestions(element, inputType) {\n    const refreshInterval = 2500;\n    debugLog(`Showing input suggestions for ${inputType} input on ${element}`);\n    let placeholderText = [];\n    if (inputType === 'generate')\n        placeholderText = generatePlaceholderText;\n    if (inputType === 'edit')\n        placeholderText = editPlaceholderText;\n    const lastFive = [];\n    const inputElement = document.querySelector(element);\n    function updatePlaceholder() {\n        debugLog('updatePlaceholder() called');\n        if (inputElement) {\n            let newText;\n            do {\n                newText =\n                    placeholderText[Math.floor(Math.random() * placeholderText.length)];\n            } while (lastFive.includes(newText));\n            lastFive.push(newText);\n            if (lastFive.length > 5) {\n                lastFive.shift();\n            }\n            inputElement.setAttribute('placeholder', newText);\n        }\n    }\n    if (inputElement) {\n        setTimeout(updatePlaceholder, 0);\n    }\n    setInterval(() => {\n        if (inputElement) {\n            updatePlaceholder();\n        }\n    }, refreshInterval);\n}\n","import debugLog from '../debug';\nimport { focusOnComposeArea, isElementVisible } from './general';\n// Change state back to the initial state\nexport function showBaseState(containerId = '') {\n    debugLog('showBaseState() called');\n    let container = $('.eg-compose-container');\n    if (containerId) {\n        // Change state of specific container, if provided\n        container = $(`.eg-compose-container-${containerId}`);\n        container.find(`.eg-buttons-bar-minimized-${containerId}`).hide();\n        $(`.eg-compose-container-${containerId}`)\n            .find('input')\n            .prop('disabled', false);\n        focusOnComposeArea(containerId);\n    }\n    else {\n        // Change state overall of no container is specified\n        container.find(`.eg-buttons-bar-minimized`).hide();\n        $(`.eg-compose-container`).find('input').prop('disabled', false);\n    }\n    container.removeClass('eg-revise-buttons-disabled');\n    container.find('.eg-buttons-bar-base').show();\n    container.find('.eg-preview-wrapper').hide();\n}\n// Toggle minimized state when the user clicks the wand icon\nexport function toggleMinimizedState(containerId) {\n    debugLog('toggleMinimizedState() called');\n    const container = $(`.eg-compose-container-${containerId}`);\n    const minimizedButton = `.eg-buttons-bar-minimized-${containerId}`;\n    if (isElementVisible(minimizedButton)) {\n        showBaseState(containerId);\n        container\n            .find(minimizedButton)\n            .removeClass('eg-buttons-bar-minimized-visible');\n    }\n    else {\n        container.find(minimizedButton).show();\n        container\n            .find(minimizedButton)\n            .addClass('eg-buttons-bar-minimized-visible');\n        container.find('.eg-buttons-bar-base').hide();\n        container.find('.eg-preview-wrapper').hide();\n    }\n}\n// Change state while waiting for OpenAI API response\nexport function showGeneratingState(containerId) {\n    debugLog('showGeneratingState() called');\n    const container = $(`.eg-compose-container-${containerId}`);\n    container.find('.eg-buttons-bar-base').hide();\n    container.find('.eg-revise-buttons').show();\n    container.find('.eg-revise').show();\n    container.find('.eg-edit').hide();\n    container.find('.eg-preview-wrapper').show();\n    container.find('.eg-preview-loading-bar').show();\n    container.find('.eg-preview-loading').show();\n    container\n        .find('.eg-stop-generating-button')\n        .attr('data-generation-cancelled', 'false');\n    container.find('.eg-preview-content').hide();\n    $(`.eg-compose-container-${containerId}`)\n        .find('input')\n        .prop('disabled', true);\n    container.addClass('eg-revise-buttons-disabled');\n}\n// Change state while OpenAI API response is streaming\nexport function showStreamingState(containerId) {\n    debugLog('showStreamingState() called');\n    const container = $(`.eg-compose-container-${containerId}`);\n    container.find('.eg-preview-loading').hide();\n    container.find('.eg-preview-content').show();\n    container.find('.eg-stream-output').addClass('eg-stream-output-with-cursor');\n    container.find('.eg-preview-button').hide();\n    container.find('.eg-stop-generating-button').show();\n}\n// Change state after message has been generated\nexport function showPreviewState(containerId) {\n    debugLog('showPreviewState() called');\n    const container = $(`.eg-compose-container-${containerId}`);\n    container.find('.eg-preview-loading-bar').hide();\n    container.find('.eg-preview-loading').hide();\n    container.find('.eg-preview-content').show();\n    container.find('.eg-stop-generating-button').hide();\n    container\n        .find('.eg-stream-output')\n        .removeClass('eg-stream-output-with-cursor');\n    container.find('.eg-revise-buttons').show();\n    container.find('.eg-preview-button').show();\n    $(`.eg-compose-container-${containerId}`)\n        .find('input')\n        .prop('disabled', false);\n    container.removeClass('eg-revise-buttons-disabled');\n}\n// Change state while editing a prompt\nexport function showEditingState(containerId) {\n    debugLog('showEditingState() called');\n    const container = $(`.eg-compose-container-${containerId}`);\n    container.find('.eg-revise').hide();\n    container.find('.eg-edit').show();\n}\n","import debugLog from '../debug';\nimport { showBaseState } from './state';\n// Prepare the status message container\nexport function initializeStatusMessageContainer(containerId) {\n    debugLog(`Creating preview container for ${containerId}...`);\n    const statusMessageContainerHTML = `\n<div class=\"eg-status-message-container eg-status-message-container-${containerId}\"></div>\n`;\n    $(`.eg-compose-container-${containerId}`).prepend(statusMessageContainerHTML);\n}\n// Clear all status messages\nexport function clearAllStatusMessages() {\n    debugLog('Clearing all status messages...');\n    $('.eg-status-message-container').html('');\n}\n// Show a status message\nexport function showStatusMessage({ type, message, containerId, changeState = true, cancellable = true, }) {\n    clearAllStatusMessages();\n    const statusMessageHTML = `\n<div class=\"eg-status-message eg-${type}-message\">\n  ${message}\n  <span class=\"eg-close-message\">${cancellable ? '&#10005;' : ''}</span>\n</div>\n  `;\n    if (containerId) {\n        const statusMessageContainer = $(`.eg-status-message-container-${containerId}`);\n        statusMessageContainer.append(statusMessageHTML);\n        if (changeState)\n            showBaseState();\n    }\n    else {\n        $('.eg-status-message-container').append(statusMessageHTML);\n        if (changeState)\n            showBaseState();\n    }\n}\n","import debugLog from './debug';\nimport apiRequest from './api';\nimport { API_ROUTES, SUBSCRIPTION_URL } from '../config';\nimport { showStatusMessage } from './ui/status-message';\n// Get user data from back end\nexport default async function getUserData() {\n    debugLog(`Fetching user data...`);\n    try {\n        const user = await apiRequest(API_ROUTES.get_user_data);\n        return user;\n    }\n    catch (error) {\n        debugLog(`Error fetching user data: \"${error}\"`);\n        throw error;\n    }\n}\n// Make sure the user has enough credits to generate a message\nexport async function validateTokenBalance(containerId) {\n    const user = await getUserData();\n    if (!user)\n        return false;\n    if (user.paidSubscriber && user.remainingCredits < 50) {\n        showStatusMessage({\n            type: 'info',\n            message: `You have ${user.remainingCredits} out of 1000 messages left this month.`,\n            containerId,\n            changeState: false,\n            cancellable: true,\n        });\n    }\n    if (!user.paidSubscriber && user.remainingCredits < 40) {\n        showStatusMessage({\n            type: 'info',\n            message: `You have ${user.remainingCredits} free message${user.remainingCredits === 1 ? '' : 's'} left.<br /><br /><a class=\"eg-upgrade-button\" href=\"${SUBSCRIPTION_URL}?email=${user.email}\" target=\"_blank\">Upgrade for $5/month</a><br /><br />Subscribers get 1000 messages per month. Cancel anytime.`,\n            containerId,\n            changeState: false,\n            cancellable: true,\n        });\n    }\n    if (user.remainingCredits > 0)\n        return true;\n    return false;\n}\n","import debugLog from './debug';\nimport { showStatusMessage } from './ui/status-message';\nexport function generateRandomString() {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < 20; i += 1) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}\nexport function getContainerId(element) {\n    const containerId = element.attr('data-container-id');\n    if (!containerId) {\n        debugLog('Error: containerId is undefined');\n        return null;\n    }\n    return containerId;\n}\nexport function validatePromptInput(prompt, containerId) {\n    debugLog('validatePromptInput() called');\n    const words = prompt.split(' ');\n    if (words.length < 2) {\n        showStatusMessage({\n            type: 'error',\n            message: 'Please enter at least 2 words',\n            containerId,\n            changeState: false,\n        });\n        return false;\n    }\n    if (prompt.length >= 1000) {\n        showStatusMessage({\n            type: 'error',\n            message: 'Please enter fewer than 1000 characters',\n            containerId,\n            changeState: false,\n        });\n        return false;\n    }\n    return true;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { listenForTokenActions } from './lib/auth';\nimport listenForGmailComposeArea from './lib/ui/compose-area';\nimport { injectFontAwesome } from './lib/ui/general';\nimport attachEventHandlers from './lib/ui/event-handlers';\n/**\n * This is the primary content script that gets invoked when the extension\n * loads. Here, we'll initialize the extension when the DOM loads.\n */\n$(() => {\n    async function initializeExtension() {\n        // Add Font Awesome icons\n        injectFontAwesome();\n        /**\n         * Check whether Gmail reply elements are visible; this runs continuously in\n         * the background, and will initialize the EmailGenius interface whenever it\n         * detects a Gmail compose area\n         */\n        listenForGmailComposeArea();\n        /**\n         * Grab and save the Chrome extension token from the EmailGenius website;\n         * this also runs continuously in the background\n         */\n        await listenForTokenActions();\n        // Attach event handlers for UI events\n        attachEventHandlers();\n    }\n    initializeExtension();\n});\n"],"names":[],"sourceRoot":""}