{"version":3,"file":"background.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://code/./ts/background.ts"],"sourcesContent":["\"use strict\";\nlet popupWindowId;\nlet triggeringTabId;\n// Handle login popup window\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    var _a;\n    if (request.message === 'open_new_popup') {\n        triggeringTabId = (_a = sender.tab) === null || _a === void 0 ? void 0 : _a.id;\n        chrome.windows.getCurrent((currentWindow) => {\n            // Center popup window in parent\n            const width = 500;\n            const height = 600;\n            const left = Math.round(currentWindow.left + (currentWindow.width - width) / 2);\n            const top = Math.round(currentWindow.top + (currentWindow.height - height) / 2);\n            // Create popup window\n            chrome.windows.create({\n                url: request.url,\n                type: 'popup',\n                width,\n                height,\n                left,\n                top,\n            }, (window) => {\n                popupWindowId = window.id;\n            });\n        });\n    }\n    else if (request.message === 'close_window') {\n        // Close popup window (invoked from content script in popup)\n        chrome.windows.remove(popupWindowId);\n    }\n    else if (request.message === 'get_triggering_tab_id') {\n        // Get tab ID (used to get the ID of the original parent tab)\n        sendResponse({ triggeringTabId });\n    }\n    else if (request.message === 'send_tab_message') {\n        chrome.tabs.sendMessage(request.tabId, request.data);\n    }\n});\n"],"names":[],"sourceRoot":""}